include: package:lints/recommended.yaml

analyzer:
  plugins:
    - custom_lint
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  errors:
    # Required for Freezed
    invalid_annotation_target: ignore
    close_sinks: ignore
  exclude:
    # generated files
    - "**/*.g.dart"
    -
    # package:dart_mappable
    - "**/*.mapper.dart"

    # package:modddels
    - "**/*.modddel.dart"

    # probably related to localization
    - "**/*.iconfig.dart"

    # i18n vscode extension
    - "**/i18n.dart"

    # package:intl localization
    - "lib/generated/intl/messages*.dart"

    # package:mason_cli
    - "bricks/**"

    # OpenAPI Generated
    - "**/*.chopper.dart"
    - "**/*.swagger.dart"
    - "**/*.auto_mappr.dart"

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Preference
    prefer_single_quotes: true

    # Can help with readability
    # omit_local_variable_types: false

    directives_ordering: true
    unnecessary_constructor_name: true
    # Avoid annotating with dynamic when not required.
    avoid_annotating_with_dynamic: true
    # Function call will not be in call stack if enabled
    # https://twitter.com/devangelslondon/status/1666474038540001289
    unnecessary_await_in_return: false
    unnecessary_late: true
    use_late_for_private_fields_and_variables: true
    use_to_and_as_if_applicable: true
    avoid_js_rounded_ints: true
    avoid_equals_and_hash_code_on_mutable_classes: true
    do_not_use_environment: true
    missing_whitespace_between_adjacent_strings: true
    only_throw_errors: true
    prefer_asserts_with_message: true
    # require_trailing_commas: false
    unnecessary_null_aware_operator_on_extension_on_nullable: true
    # while important, it is not a priority for an app
    public_member_api_docs: false
    lines_longer_than_80_chars: false
    avoid_print: false

    # Below is from Solid Lints

    always_declare_return_types: true
    always_put_required_named_parameters_first: true
    always_use_package_imports: true
    annotate_overrides: true
    avoid_bool_literals_in_conditional_expressions: true
    avoid_catching_errors: true
    avoid_double_and_int_checks: true
    avoid_dynamic_calls: true
    avoid_empty_else: true
    avoid_escaping_inner_quotes: true
    avoid_field_initializers_in_const_classes: true

    # We are already using the `parameter_assignments` lint.
    # Adding final to parameters has the same effect as `parameter_assignments`
    # so it doesn't make sense to use final parameters with `parameter_assignments`.
    avoid_final_parameters: true
    avoid_function_literals_in_foreach_calls: true
    avoid_implementing_value_types: true
    avoid_init_to_null: true
    avoid_multiple_declarations_per_line: true
    avoid_null_checks_in_equality_operators: true
    avoid_positional_boolean_parameters: true
    avoid_private_typedef_functions: true
    avoid_redundant_argument_values: true
    avoid_relative_lib_imports: true
    avoid_renaming_method_parameters: true
    avoid_return_types_on_setters: true
    avoid_returning_null_for_void: true
    avoid_setters_without_getters: true
    avoid_shadowing_type_parameters: true
    avoid_single_cascade_in_expression_statements: true
    avoid_type_to_string: true
    avoid_types_as_parameter_names: true
    avoid_unnecessary_containers: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    await_only_futures: true
    camel_case_extensions: true
    camel_case_types: true
    cancel_subscriptions: true
    # Similar to avoid-non-null-assertion, which is already used,
    # basically it suggests to not ignore possible null value
    cast_nullable_to_non_nullable: true
    close_sinks: true
    comment_references: true
    conditional_uri_does_not_exist: true
    constant_identifier_names: true
    control_flow_in_finally: true
    curly_braces_in_flow_control_structures: true
    depend_on_referenced_packages: true
    deprecated_consistency: true
    # - diagnostic_describe_all_properties
    # Pretty much agree with Passy & linter package.
    # Our use case for Flutter for web where there are no flavors yet.
    # So using dart-define is helpful.
    #- do_not_use_environment
    empty_catches: true
    empty_constructor_bodies: true
    empty_statements: true
    eol_at_end_of_file: true
    exhaustive_cases: true
    file_names: true
    hash_and_equals: true
    implementation_imports: true
    # deprecated rule in Flutter 3.7
    # - invariant_booleans
    # - iterable_contains_unrelated_type
    collection_methods_unrelated_type: true
    join_return_with_assignment: true
    leading_newlines_in_multiline_strings: true
    library_names: true
    library_prefixes: true
    # - list_remove_unrelated_type
    literal_only_boolean_expressions: true
    no_adjacent_strings_in_list: true
    no_duplicate_case_values: true
    no_leading_underscores_for_library_prefixes: true
    no_leading_underscores_for_local_identifiers: true
    no_logic_in_create_state: true
    no_runtimeType_toString: true
    non_constant_identifier_names: true
    noop_primitive_operations: true
    null_check_on_nullable_type_parameter: true
    overridden_fields: true
    package_names: true
    package_prefixed_library_names: true
    parameter_assignments: true
    prefer_adjacent_string_concatenation: true
    prefer_asserts_in_initializer_lists: true
    prefer_collection_literals: true
    prefer_conditional_assignment: true
    prefer_const_constructors: true
    prefer_const_constructors_in_immutables: true
    prefer_const_declarations: true
    prefer_const_literals_to_create_immutables: true
    prefer_constructors_over_static_methods: true
    prefer_contains: true
    # These two are incompatible, and one should be selected depending on your project's style.
    # - prefer_double_quotes
    # - prefer_single_quotes
    # removed in Dart 3.0.0
    # - prefer_equal_for_default_values
    # Not used, as the default app template has a single statement return code generated.
    # While this could be beneficial for Dart projects and maintaining code style, we are unaware
    # of any substantial evidence that improves code when using expression function body
    # vs single statement return. We are considering including this in Dart only lints.
    #   - prefer_expression_function_bodies
    prefer_final_fields: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    # While it is similar to `unnecessary_lambdas`,
    # it forcefully replaces structural/procedural semantics with
    # their functional counterparts.
    # We think this is a stylistic choice and will leave it up to users.
    # - prefer_foreach
    prefer_for_elements_to_map_fromIterable: true
    prefer_function_declarations_over_variables: true
    prefer_generic_function_type_aliases: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_if_null_operators: true
    prefer_initializing_formals: true
    prefer_inlined_adds: true
    prefer_interpolation_to_compose_strings: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_is_not_operator: true
    prefer_iterable_whereType: true
    prefer_null_aware_method_calls: true
    prefer_null_aware_operators: true
    prefer_spread_collections: true
    prefer_typing_uninitialized_variables: true
    prefer_void_to_null: true
    provide_deprecation_message: true
    recursive_getters: true
    require_trailing_commas: false
    secure_pubspec_urls: true
    sized_box_for_whitespace: true
    sized_box_shrink_expand: true
    slash_for_doc_comments: true
    sort_child_properties_last: true
    # We tend to use class organization close to standard Java convention, where fields come first.
    # Martin, R. C. & Coplien, J. O. (2013), Chapter 10: Classes. Clean code: a handbook of agile software craftsmanship , Prentice Hall , Upper Saddle River, NJ [etc.] . 136
    #    - sort_constructors_first
    sort_pub_dependencies: true
    sort_unnamed_constructors_first: true
    test_types_in_equals: true
    throw_in_finally: true
    tighten_type_of_initializing_formals: true
    type_annotate_public_apis: true
    type_init_formals: true
    unawaited_futures: true
    unnecessary_brace_in_string_interps: true
    unnecessary_breaks: true
    unnecessary_const: true
    unnecessary_getters_setters: true
    unnecessary_lambdas: true
    unnecessary_new: true
    unnecessary_null_aware_assignments: true
    unnecessary_null_checks: true
    unnecessary_null_in_if_null_operators: true
    unnecessary_nullable_for_final_variable_declarations: true
    unnecessary_overrides: true
    unnecessary_parenthesis: true
    unnecessary_raw_strings: true
    unnecessary_statements: true
    unnecessary_string_escapes: true
    unnecessary_string_interpolations: true
    unnecessary_this: true
    unnecessary_to_list_in_spreads: true
    unrelated_type_equality_checks: true
    unsafe_html: true
    use_build_context_synchronously: true
    use_colored_box: true
    use_decorated_box: true
    use_full_hex_values_for_flutter_colors: true
    use_function_type_syntax_for_parameters: true
    use_if_null_to_convert_nulls_to_bools: true
    use_is_even_rather_than_modulo: true
    use_named_constants: true
    use_raw_strings: true
    use_rethrow_when_possible: true
    use_setters_to_change_properties: true
    use_string_buffers: true
    use_super_parameters: true
    use_test_throws_matchers: true
    valid_regexps: true
    void_checks: true
